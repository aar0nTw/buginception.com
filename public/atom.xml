<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[[bug:inception]]]></title>
  <link href="http://blog.buginception.com/atom.xml" rel="self"/>
  <link href="http://blog.buginception.com/"/>
  <updated>2012-09-09T17:04:42+08:00</updated>
  <id>http://blog.buginception.com/</id>
  <author>
    <name><![CDATA[Aaron Huang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[待業中 :-)]]></title>
    <link href="http://blog.buginception.com/blog/2012/08/27/new-job/"/>
    <updated>2012-08-27T23:10:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/08/27/new-job</id>
    <content type="html"><![CDATA[<p><img src="http://blog.buginception.com/images/901911238520281.jpg" alt="image" /></p>

<p>(image via <a href="http://www.behance.net/gallery/The-Big-Deal/204395">Anca Sandu</a>)</p>

<blockquote><p><del>在文章前面放張圖片這麼給掰的一件事，我早就想幹一次試試看了</del>，當我打開 octopress 的 source 資料夾，才意識到自己已經整整四個月沒動過文章了 Orz，About Me 這頁看來好像也該改改了。<strong>待業中聽起來好像很糟啊</strong>，不過其實應該是 <strong>等待就業中</strong>，下週一開始面對的，將是截然不同的新工作。</p></blockquote>

<p>特地選擇在上週離職，並且把特休休完，這樣我還有整整十天的時間可以調整步調跟好好休息，不用太匆促的做轉換。</p>

<p>沒寫文章四個月，四個月前，正好是我開始認真考慮去留的時間點，花了很長的時間思考，畢竟這是出社會後的第一份工作，也待了將近兩年的時光，說沒有情感在裡頭，是騙人的。</p>

<p>來說說關於去留這件事，每個人考慮一間公司或一個團隊適不適合自己，大部分跟幾種原因脫不了關係，尤其是團隊有大型決策時，人們嘴上不說，心中總是自己默默的在考量整個團隊走向，別忘了，在小型團隊裡，那種上對下的關係其實是沒有那麼明顯的，公司、團隊會篩選成員，考核成員；但成員也同樣在打量整個團隊、領導人。</p>

<!-- more -->


<p>那麼，哪些原因會是成員們考量的點？簡單來說就是：<strong>成就感、人際關係、跟錢</strong>。</p>

<p>這三種裡面，要是缺了其中一種，其實就有了一個理由。</p>

<p>但是，要三種都有，那是上輩子有燒香。要三種都沒有，那也不太可能，因為苗頭不對，早就閃人了。</p>

<p>不過以上三個點，是大部分人考慮的，但都不是最重要的！其實很多事情最重要的，是兩個字：<strong>說服</strong>。</p>

<p>一個團隊有沒有辦法拿出條件，說服你願意奉獻自身所學，那才是最重要的。如果客觀條件看來團隊並沒有說服你，那你就必須自己說服自己。</p>

<p>一個團隊，一群人，每個人都有不同的背景，但是卻聚集在同一個地方，這樣的一件事，光用想的就會覺得很棒，尤其是如果每個人都願意為了相同的目標往前，那會是更棒的一件事。</p>

<p>如果工作上沒有一個理由，將這群偶然聚首的人連結起來，那也不過就是個普通的工作罷了。</p>

<p>偏偏很多人，是誤打誤撞的開始了當下的工作，找一份工作，開始上班、賺錢；當然很多人就是希望當個普通的上班族就好了，不過我相信那不是這些人最原始的希望，只不過是這些人還沒開始做一個屬於自己的夢而已。</p>

<p>可惜，我知道我不是這樣子的，那不是我的初衷。不知道有幾個人說過，我很幸運，從小就知道自己要做什麼，長大後，出社會了也是做自己有興趣的工作。不，不對，我仍然在朝著我的目標前進、努力，我小時候的確是以成為程式設計師為目標努力著，但是過了不久，我還是中學生，但我知道我以後一定會吃這行飯，所以我在目標前面加了三個字，我想成為偉大的程式設計師，後來再長大了一點，發現要達成偉大似乎稍嫌遙遠，所以我再修正我的目標，我希望有一天能成為一個<strong>受人尊敬的開發者</strong>。</p>

<p>目標總會修正，但是初衷卻不會改變。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OSX 下使用中研院的 tunnel broker]]></title>
    <link href="http://blog.buginception.com/blog/2012/04/30/macosx-ipv6-ascc-tunnel-broker/"/>
    <updated>2012-04-30T22:28:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/04/30/macosx-ipv6-ascc-tunnel-broker</id>
    <content type="html"><![CDATA[<blockquote><p>今天 <a href="http://disp.cc/b/570-3ymq">[問卦] 中華電信HiNet連YouTube慢的真相?</a> 這件事好像很夯，包含之前 Mobile01 上面也有相關文章：
<a href="http://www.mobile01.com/topicdetail.php?f=507&amp;t=2612039&amp;p=1">中華電信HiNet連YouTube慢的真相-人為互連障礙</a>，
我參考了下面這篇文章稍作修正讓 osx 也能用中研院的 tunnel broker：
<a href="http://blog.richliu.com/2012/04/28/1204/">Gentoo Gateway 連中研院的 IPv6 Tunnel Broker</a> via <a href="http://blog.richliu.com">richliu&#8217;s blog</a></p></blockquote>

<!-- more -->


<h2>環境需求</h2>

<ol>
<li>首先，你必須是 Mac OS X （嗯對，這篇是教你在 OS X 上用，其他環境的教學已經有了）</li>
<li>你要有 <code>root</code> 權限</li>
<li>你要有開發環境，因為我們需要 C compiler，裝個 <a href="https://developer.apple.com/technologies/tools/">XCode</a> 吧！</li>
</ol>


<p>先到 <a href="http://tb2.ipv6.ascc.net/">http://tb2.ipv6.ascc.net</a> 申請一個帳號，我是選第一個，亂數產生密碼寄到您的信箱。</p>

<h2>TunTap Driver</h2>

<p>再來，你需要安裝一下 <a href="http://tuntaposx.sourceforge.net/">TunTap Driver</a>，這是幹嘛的呢？他讓你的 OS X 可以新增一個虛擬的網路介面，到網站上下載 .pkg 檔安裝就可以了。最新的 release 版本是 <a href="http://downloads.sourceforge.net/tuntaposx/tuntap_20111101.tar.gz">tuntap_20111101</a>，如果不安裝的話，等下 gw6c 是跑不起來的。</p>

<h2>Gateway 6 client</h2>

<p>再來請到 <a href="http://www.go6.net/4105/download.asp">go6.net</a> 下載 gw6c 的 source，這邊我們要自己 compile client 端，選擇 <strong>Client 6.0 Source Code (Linux/Unix/Darwin/BSD)</strong>，解壓縮。</p>

<p>因為我也滿懶，所以我就直接在下載資料夾下面搞了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/Downloads/gw6c-6_0_1/
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>tspc-advanced
</span><span class='line'><span class="nv">$ </span>chmod +x template/*.sh
</span><span class='line'><span class="nv">$ </span>make all
</span></code></pre></td></tr></table></div></figure>


<p>會在 <code>./tspc-advanced/bin</code> 下產生 gw6c 的執行檔</p>

<p>其實你也可以做 install：</p>

<figure class='code'><figcaption><span>gw6c-6_0_1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>tspc-advanced
</span><span class='line'><span class="nv">$ </span>make clean
</span><span class='line'><span class="nv">$ </span>make <span class="nv">platform</span><span class="o">=</span>darwin <span class="nv">installdir</span><span class="o">=</span>/usr/local/gw6c install
</span></code></pre></td></tr></table></div></figure>


<p>建議是裝在 <code>usr/local/</code> 下面
然後改寫一下設定檔，拿內附的範例設定來改：</p>

<figure class='code'><figcaption><span>usr/local/gw6c/</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>bin
</span><span class='line'><span class="nv">$ </span>vim ./gw6c.conf
</span></code></pre></td></tr></table></div></figure>


<p>編輯 <code>gw6c.conf</code>，大致上就是：</p>

<figure class='code'><figcaption><span>gw6c.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">userid</span><span class="o">=</span>剛剛申請的帳號
</span><span class='line'><span class="nv">passwd</span><span class="o">=</span>剛剛拿到的密碼
</span><span class='line'><span class="nv">server</span><span class="o">=</span>tb2.ipv6.ascc.net
</span><span class='line'><span class="nv">auth_method</span><span class="o">=</span>digest-md5
</span><span class='line'><span class="nv">host_type</span><span class="o">=</span>host
</span><span class='line'><span class="nv">if_prefix</span><span class="o">=</span>en0
</span></code></pre></td></tr></table></div></figure>


<p>啟動吧！：</p>

<figure class='code'><figcaption><span>./tspc-advanced/bin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>//這是沒 install 的情況
</span><span class='line'><span class="nv">$ </span><span class="nb">pwd</span>
</span><span class='line'>/Users/apple/Downloads/gw6c-6_0_1/tspc-advanced/bin
</span><span class='line'><span class="nv">$ </span>sudo ./gw6c -f gw6c.conf
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>usr/local/gw6c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>//有 install 就直接來吧
</span><span class='line'><span class="nv">$ </span><span class="nb">pwd</span>
</span><span class='line'>/usr/local/gw6c/bin
</span><span class='line'><span class="nv">$ </span>sudo ./gw6c
</span></code></pre></td></tr></table></div></figure>




<blockquote class="note">
<p>
如果你的是 gogoc，步驟也大同小異，應該說一樣 :P，這裡有 gogoc 的 <a href="http://gogo6.com/downloads/gogoc-1_2-RELEASE.tar.gz">source</a>
</p>
</blockquote>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ifconfig
</span></code></pre></td></tr></table></div></figure>


<p><code>tun0</code> 有起來就是成功了</p>

<p>看一下 ipv6 的 google 吧！<a href="http://ipv6.google.com">ipv6.google.com</a></p>

<h2>後記</h2>

<p>其實好像也沒變多快，不過看 full HD 的有差就是了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Yii]Ch.1-1 MVC 架構]]></title>
    <link href="http://blog.buginception.com/blog/2012/04/29/yii-mvc-structure/"/>
    <updated>2012-04-29T01:32:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/04/29/yii-mvc-structure</id>
    <content type="html"><![CDATA[<p>MVC 模式，這個模式的概述，應該是已經講到爛掉的 topic 了，所以這篇我主要想從 Yii 對於 Model-View-Controller 的相關實作方式來切入。</p>

<blockquote class="note">
<p>
如果真的不了解 MVC 模式，我想從 Wikipedia 開始會是不錯的選擇 XD
</p>
</blockquote>


<p></p>

<p>除了 MVC 模式之外，Yii 還有一個名為 Application 的 front-controller，Application 可稱為 Yii 的統整中心，負責處理並分配 User 所有的 Request，整個 Yii app 的結構可以看下面這張示意圖:</p>

<p><img src="http://blog.buginception.com/images/yii-static-struct.png" alt="" /></p>

<!-- more -->


<p>Yii MVC 實作主要在下方這幾個類別</p>

<ul>
<li><strong>Model</strong> : CActiveRecord &lt; CModel</li>
<li><strong>Controller</strong> : CController , CAction</li>
<li><strong>View</strong> : CController , CViewRenderer , CPradoRenderer</li>
</ul>


<h2>Model</h2>

<p>Yii 自行實作了自己的 ORM 類別： <strong>CActiveRecord</strong> ， 從名字上可以看得出來，它是以 ActiveRecord Design Pattern 做為藍本來建構的。</p>

<blockquote class="note">
<p>
如果你同時也是個 Rails 的開發者，我想對 ActiveRecord Pattern 是在熟悉不過了。  當然，除了 Yii 之外，許多其他的 PHP framework 也有實作 ActiveRecord，包含了 CakePHP、FuelPHP、CodeIgniter 等等。
</p>
</blockquote>


<p>每一個繼承自 ActiveRecord 的類別，都代表資料庫中的一張 table ，而每一個ActiveRecord 的實體都代表著一筆紀錄，資料庫的所有 CRUD 的操作都被實作在 ActiveRecord 類別裡面，因此我們可以用 OO 的方式更輕鬆的來處理我們的資料。</p>

<p>舉例來說，如果我們想新增一筆資料在 Foo 這張資料表中，我們可以透過下面這樣
的方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">;</span>
</span><span class='line'><span class="nv">$foo</span> <span class="o">-&gt;</span> <span class="na">name</span> <span class="o">=</span> <span class="s1">&#39;Bar&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$foo</span> <span class="o">-&gt;</span> <span class="na">save</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yii 中，透過了 <code>CDbConnection</code> 來處理資料庫連線的部分，可以在 <code>config/main.php</code> 中設置資料庫連線：</p>

<figure class='code'><figcaption><span>config/main.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="err">…略</span>
</span><span class='line'><span class="s1">&#39;db&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;system.db.CDbConnection&#39;</span><span class="p">,</span> <span class="c1">// 預設是不需要定義 class 的</span>
</span><span class='line'>  <span class="s1">&#39;connectionString&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;sqlite:path/to/dbfile&#39;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是 MySQL 設定：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="err">…略</span>
</span><span class='line'><span class="s1">&#39;db&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;connectionString&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;mysql:host=yourhost;dbname=yourdbname&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;emulatePrepare&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;charset&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote class="note">
<p>
Yii 的資料庫設定中，有一項名為 schemaCachingDuration 的設定參數，當這個參數的值 > 0 時，會打開資料庫 metadata 的快取，如果是在 production 環境下，資料表的結構很少變動了，應該要打開這個設定，以節省讀取資料表結構的時間。
</p>
</blockquote>


<h2>Controller</h2>

<p>Yii app 的 Controller 如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FooController</span> <span class="k">extends</span> <span class="nx">Controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1">// some code...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 <code>Controller</code> 也是繼承自 <code>CController</code>，它的位置在 <code>protected/component/</code> 資料夾下，所有透過 <strong>yiic</strong> 或是 <strong>gii</strong> 所產生的 Controller 都會繼承自 <code>Controller</code> 這個類別，方便定義全站 Controller 共同的方法與變數。</p>

<p>Yii 透過 application 中的 url route 來判斷 Controller 與 Action ，不管是 Controller 或是 Action 都是透過 ID 來判斷，這之後再深入探討，簡單來說如果你希望呼叫 <code>FooController -&gt; actionBar()</code> url route 就會是 <code>foo/bar</code>。</p>

<blockquote class="note">
<p>
你可以修改 <code>config/main.php</code> 中的 <code>urlManager</code> 來自定義 url route。
</p>
</blockquote>


<p>Controller 的實作部分，可以分為 <code>CController</code> 與 <code>CAction</code>這兩個模組來解釋，<code>CController</code> 類別與其子類別回應使用者的 Request 並將其對應到 Action。 一個使用者發送 Request 到 <code>actionBar</code> 時，Controller 會經過下面的流程：</p>

<ol>
<li><strong>Method-based action</strong> ： 尋找 Controller 中是否有名為 <code>actionBar</code> 的 method，如果有，便執行它。</li>
<li><strong>Class-based action</strong>：如果沒有 Method-based action ，便搜尋 <strong>action class map</strong> ，（ class map 定義在 Controller 中的 <code>actions()</code> 方法 ) 如果 class map 中有定義名為 Bar 的 <code>CAction</code> 類別，便新增一個 Bar 的實體，並執行 <code>Foo -&gt; run()</code> 方法。</li>
<li><strong>Call missingAction()</strong>：如果都找不到，將會執行 <code>missingAction()</code> 方法，你可以複寫這個方法，預設是拋出 <code>404 HttpException</code>。</li>
</ol>


<blockquote class="note">
<p>
如果使用者並沒有要求任何 Action ， Controller 將回傳 <code>defaultAction</code>，預設是 actionIndex，當然，你也可以指定其他的 action 作為 defaultAction。
</p>
</blockquote>


<p>除了在 Controller 中定義 action 方法之外，我們也可以採用所謂的 <strong>Class-based action</strong> 的方式來定義 action，往後的篇章再做說明。</p>

<h2>View</h2>

<p>Yii 中的 View Render，我們可以透過 <code>CController::render</code> 來呼叫 View 檔案，預設的 view 檔案會放在 `protected/views/ControllerID/ 這個資料夾下，因此我們在 action 方法中可以呼叫 render() 來呼叫 View ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FooController</span> <span class="k">extends</span> <span class="nx">Controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="k">public</span> <span class="nx">actionBar</span><span class="p">()</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span> <span class="o">-&gt;</span> <span class="na">render</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>當使用者呼叫 <code>actionBar()</code> 時，Controller 會找到在 <code>protected/views/foo/</code> 資料夾中的 <code>bar.php</code> 並顯示在使用者的畫面上，完成這次的 Request。 在 view script 檔案中，我們可以透過 <code>$this</code> 來存取 render view 的 controller 實體，Yii 稱這種方式為 <code>pull</code>，我們也可以透過所謂 <code>push</code> 的方式，直接在 render 的時候將資料送進 view 檔案中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="nx">actionBar</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span> <span class="o">-&gt;</span> <span class="na">render</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;var&#39;</span><span class="o">=&gt;</span><span class="nv">$value</span>
</span><span class='line'>  <span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上面的範例來說，我們可以直接在 view 之中使用名稱為 <code>$var</code> 的變數：</p>

<figure class='code'><figcaption><span>protected/views/foo/bar.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="c1">//用 pull 的方式 存取 FooController 的 layout 屬性</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$this</span> <span class="o">-&gt;</span> <span class="na">layout</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//存取 controller push 過來的 var 變數</span>
</span><span class='line'>  <span class="k">echo</span> <span class="nv">$var</span><span class="p">;</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Yii 也支援使用者使用自定義的 template syntax，可以透過繼承 <code>CViewRenderer</code> 定義自己設計的特殊 syntax。設計好了 View Renderer 只需要在 <code>config/main.php</code> 中設定：</p>

<figure class='code'><figcaption><span>protected/config/main.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>  <span class="s1">&#39;components&#39;</span><span class="o">=&gt;</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="o">...</span>
</span><span class='line'>      <span class="s1">&#39;viewRenderer&#39;</span><span class="o">=&gt;</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;class&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;path/to/your/ViewRender&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">),</span>
</span><span class='line'>  <span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote class="note">
<p>
Yii 本身內建了 PradoViewRenderer，只要在設定檔將 viewRenderer class 設定為 <code>CProdoViewRenderer</code> 就可以使用 <a href="http://www.pradosoft.com/demos/quickstart/?page=Configurations.Templates1">Prado</a> 的 template 語法。
</p>
</blockquote>


<h2>再複習一次</h2>

<p>使用者的一個 Request 進入Yii 從 <code>index.php</code> 開始，然後開啟了一個 <code>CWebApplication</code> 透過 url router 導入到正確的 Controller，Controller 管理並選擇使用者呼叫的 <strong>Action</strong>，Action 中，可能開啟調用資料庫的 ActiveRecord 取得資料庫資料，最後將畫面 Render 出來，完成一次 Request。</p>

<p>整個 Yii 對 MVC 的實作概念解說大概到這邊，下次將從 EntryScript 開始深入探究 YiiFramework :)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Redmine 中加入 Git Repository]]></title>
    <link href="http://blog.buginception.com/blog/2012/04/02/redmine-use-git-code-review/"/>
    <updated>2012-04-02T12:36:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/04/02/redmine-use-git-code-review</id>
    <content type="html"><![CDATA[<p>相信 <a href="http://www.redmine.org/">Redmine</a> 是很多人在使用的專案管理系統，而 <a href="http://git-scm.com/">Git</a>，相信也是各種 SCM 裡的大宗，而應該滿多人使用 <a href="https://github.com/sitaramc/gitolite">gitolite</a> 來控管自己的 git remote server 的。</p>

<p>之所以寫這篇，是因為小弟公司在整合兩者的時候，撞到了 gitolite 的 repo 權限問題。</p>

<p>所以這篇就來簡單的講解一下如何在 Redmine 裡面加入使用 gitolite 管理的 Repository ， 可在 Redmine 直接觀看 Source Repo，以及作為 Code Review 之用。</p>

<!-- more -->


<p>首先我們要了解的是，<strong>Redmine 僅能透過檔案系統來存取本地端的 Git Repo</strong>，它並沒有辦法透過 Git protocol 來存取遠端的 Repository。 但是就算是 Local 端的 Repo ， 在 gitolite 的管理之下，Redmine 還是沒有權限去存取 gitolite 控制的 Repository。</p>

<p>因此首先我們要製作一個 Redmine 可以存取的鏡像 Repo。從 Git 1.6 開始我們可以直接從一個 bare repository clone 產出另一個 bare repository。</p>

<p>首先建立一個資料夾來存放我們待會要 clone 的 repository。</p>

<p>*這邊開始以 <code>/var/git-miroors</code> 資料夾為例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir /var/git-mirrors
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /var/git-mirrors/
</span></code></pre></td></tr></table></div></figure>


<p>再來我們要使用 <code>git clone --mirror</code> 建立一個原始 repo 的鏡像：</p>

<figure class='code'><figcaption><span>Folder : /var/git-mirrors/</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone --mirror your/gitolite/path/your-repo.git
</span></code></pre></td></tr></table></div></figure>


<p>接下來下一步，由於之後 <code>git</code> 使用者會透過 <code>post-receive</code> hook 來同步兩個 repository，我們直接修改這個境像 repository 的 owner / group 為 <code>git</code> 來讓它有讀寫權限。</p>

<figure class='code'><figcaption><span>Folder : /var/git-mirror</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chown -R git:git your-repo.git
</span></code></pre></td></tr></table></div></figure>


<p>再來我們要設定原本 repo 的 <a href="http://sitaramc.github.com/gitolite/hooks.html">hooks</a> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>your/gitolite/path/your-repo.git
</span><span class='line'><span class="nv">$ </span>vi post-receive
</span></code></pre></td></tr></table></div></figure>


<p>在 hook <code>post-receive</code> 設定 git push 到鏡像 repo 的動作：</p>

<figure class='code'><figcaption><span>post-receive</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>/usr/bin/git push --mirror /var/git-mirrors/your-repo.git
</span></code></pre></td></tr></table></div></figure>


<p>建立完 <code>post-receive</code> 檔案後修改權限：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chown git:git post-receive
</span><span class='line'><span class="nv">$ </span>chmod 700 post-receive
</span></code></pre></td></tr></table></div></figure>


<p>由於 Git 在做 mirror push 的時候，會保留原始的檔案與資料夾存取權限，在 gitolite 控管下，只有 owner 有讀寫權限，所以一做 mirror push 這個鏡像的 repository 就沒辦法被其他 process 讀取到了，所以我們一開始就要告訴這個 mirror repository 它是被分享的，並且設定它應該要有的存取權限：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /var/git-mirrors/your-repo.git
</span><span class='line'><span class="nv">$ </span>chmod a+rX -R ./
</span><span class='line'><span class="nv">$ </span>git config --add core.sharedRepository 644
</span></code></pre></td></tr></table></div></figure>


<p>然後在 Redmine 的 Project / Settings / Repository 裡，設定路徑：</p>

<p><img src="http://f.cl.ly/items/0v2V1k0i1y323G2k3S45/Screen%20Shot%202012-04-02%20at%203.03.20%20PM.PNG" alt="" /></p>

<p>點選 Project / Repository 等待一下，讓 Redmine 處理 Repository 的資訊，然後看到 Repo 的資訊：</p>

<p><img src="http://f.cl.ly/items/0P2f0F3K1q402L3Q3a0I/Screen%20Shot%202012-04-02%20at%203.04.53%20PM.PNG" alt="" /></p>

<p>收工 :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Yii]Ch.0-4 建立第一個Web app]]></title>
    <link href="http://blog.buginception.com/blog/2012/03/23/yii-say-hello-for-world/"/>
    <updated>2012-03-23T19:25:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/03/23/yii-say-hello-for-world</id>
    <content type="html"><![CDATA[<blockquote><p>最近公事繁忙，一回神已經兩週沒更新blog了orz。
現在Yii framework，已經merge到github上了，可以clone下來對yii作版本管理:)</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/yiisoft/yii.git
</span></code></pre></td></tr></table></div></figure>


<p>前面講到的部分，基本上是屬於環境配置的部分，接下來我們要正式的進入實作階段:)</p>

<p>首先建立一個新的Web App
（這邊以~/htdocs 為網站根目錄）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>yiic webapp ~/htdocs/demo
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>yiic是YiiFramework內建的一個console工具可以快速建立web app，作migration，shell模式下可以建立model，scaffold，module等等，建議使用強大的網頁介面Gii，不過我還是習慣用console :D</p>

<p>建立了一個新的web app之後，首先我們可以看到資料夾內作為bootstrap的index.php，這邊稍微簡單講一下：</p>

<figure class='code'><figcaption><span>index.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// change the following paths if necessary</span>
</span><span class='line'><span class="nv">$yii</span><span class="o">=</span><span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;/../yii/framework/yii.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$config</span><span class="o">=</span><span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;/protected/config/main.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// remove the following lines when in production mode</span>
</span><span class='line'><span class="nb">defined</span><span class="p">(</span><span class="s1">&#39;YII_DEBUG&#39;</span><span class="p">)</span> <span class="k">or</span> <span class="nb">define</span><span class="p">(</span><span class="s1">&#39;YII_DEBUG&#39;</span><span class="p">,</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'><span class="c1">// specify how many levels of call stack should be shown in each log message</span>
</span><span class='line'><span class="nb">defined</span><span class="p">(</span><span class="s1">&#39;YII_TRACE_LEVEL&#39;</span><span class="p">)</span> <span class="k">or</span> <span class="nb">define</span><span class="p">(</span><span class="s1">&#39;YII_TRACE_LEVEL&#39;</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">require_once</span><span class="p">(</span><span class="nv">$yii</span><span class="p">);</span>
</span><span class='line'><span class="nx">Yii</span><span class="o">::</span><span class="na">createWebApplication</span><span class="p">(</span><span class="nv">$config</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到require了yii.php（Production環境可以改用yiilite.php），定義了DEBUG跟TRACE_LEVEL。
這兩個常數會決定yii會不會寫入log，以及log與錯誤訊息顯示的詳細程度。</p>

<p>Production環境中為了提高app的performance這兩個常數會定義為false跟0。</p>

<p>然後我們可以看到Yii將會以$config變數指定的config檔案開啟一個yii app。</p>

<p>首先我們要了解一下Yii的檔案結構:</p>

<figure class='code'><figcaption><span>demo/</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>drwxrwxrwx   3 aaron  staff  102 Mar 23 16:36 assets
</span><span class='line'>drwxr-xr-x   8 aaron  staff  272 Mar 23 11:39 css
</span><span class='line'>drwxr-xr-x   2 aaron  staff   68 Mar 23 11:39 images
</span><span class='line'>-rw-r--r--   1 aaron  staff  497 Mar 23 11:41 index-test.php
</span><span class='line'>-rw-r--r--   1 aaron  staff  574 Mar 25 03:35 index.php
</span><span class='line'>drwxr-xr-x  18 aaron  staff  612 Mar 23 11:39 protected
</span><span class='line'>drwxr-xr-x   3 aaron  staff  102 Mar 23 11:39 themes
</span></code></pre></td></tr></table></div></figure>


<p>assets的部分，其實就是運用<code>CAssetsManager</code>類別來控管或自動產出包括js,css等有可能造成衝突的檔案，有機會在詳細的討論，css,images，可以不透過Yii直接引用的靜態css,image檔案，theme則是不使用預設的them template時，放上自己或是別人寫的theme。 protected資料夾則是整個yii app的靈魂所在，這邊我們就另外的來看一下。</p>

<figure class='code'><figcaption><span>demo/protected/</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   -protected
</span><span class='line'>   |---commands
</span><span class='line'>   |-----shell
</span><span class='line'>   |---components
</span><span class='line'>   |---config
</span><span class='line'>   |---controllers
</span><span class='line'>   |---data
</span><span class='line'>   |---extensions
</span><span class='line'>   |---messages
</span><span class='line'>   |---migrations
</span><span class='line'>   |---models
</span><span class='line'>   |---runtime
</span><span class='line'>   |---tests
</span><span class='line'>   |-----fixtures
</span><span class='line'>   |-----functional
</span><span class='line'>   |-----report
</span><span class='line'>   |-----unit
</span><span class='line'>   |---views
</span><span class='line'>   |-----layouts
</span><span class='line'>   |-----site
</span><span class='line'>   |-------pages
</span></code></pre></td></tr></table></div></figure>


<p>protected資料夾簡單分成幾個部分：</p>

<ul>
<li>components</li>
<li>config</li>
<li>controllers</li>
<li>extensions</li>
<li>models</li>
<li>tests</li>
<li>views</li>
</ul>


<p><strong>components</strong>放置一些可以重用的開發者自行定義的元件
<strong>config</strong>是全站的設定檔，包含網站與cosole app還有測試環境的設定</p>

<p><strong>controllers</strong>,<strong>models</strong>,<strong>views</strong>三個資料夾是放置mvc結構的檔案，<strong>controllers</strong>裡面的class name跟views裡的檔案結構是有相對應的關係的，預設裡面有一個<strong>SiteController</strong>，<strong>views</strong>裡面會有相對應的<strong>site</strong>資料夾存放他的前端呈現的頁面。<strong>models</strong>則是放置了所有資料庫相關的<strong>ActiveRecord</strong> Class。</p>

<p><strong>tests</strong>資料夾則是放置PHPUnit的測試scripts，使用gii或是yiic shell產生Model時，會自動的產生出相對應的ModelTest類別，對有做單元測試的開發者來講可以相當方便的使用PHPUnit來作測試，也支援使用Selenium來作功能測試。</p>

<p>Yii整體的優點其實很多，就這篇的資料夾結構來講可以看出，其Yii已經幫你產出了測試框架，在做UnitTest,Functional Test可以很快的進入狀況，尤其實你是屬於採用TDD方法來開發的開發者。:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[OSX]關閉Yahoo!輸入法的一點通服務]]></title>
    <link href="http://blog.buginception.com/blog/2012/02/29/disable-yahoo-keykey-onekey-on-mac/"/>
    <updated>2012-02-29T23:38:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/02/29/disable-yahoo-keykey-onekey-on-mac</id>
    <content type="html"><![CDATA[<p>Yahoo!輸入法算是Mac上好用的注音輸入法了，但是內建的一點通服務不能關閉，只能在 ` 或是 ~ 擇一當快速鍵，
偏偏 ` 常常用到，~就是homedir…用哪個都不對囧，而且不管在中文還是英文輸入模式都會開啟，真的是擾民。</p>

<p>上網搜尋了一下，都是Windows底下的強制關閉方式，OSX的倒是一篇都沒看到，想想既然windows版的也是用plist當設定檔，Mac上絕對也是一樣吧XD？找了一下，一點通Perference的設定檔是在：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Library/Preferences/com.yahoo.KeyKey.OneKey.plist
</span></code></pre></td></tr></table></div></figure>


<p>把內容的：</p>

<figure class='code'><figcaption><span>com.yahoo.KeyKey.OneKey.plist</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>ShortcutKey<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>`<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>&lt;string&gt;`&lt;/string&gt;</code> 的部份改掉即可:D</p>

<!-- more -->


<p><strong>Update:</strong></p>

<p>有Ptt板友指出要一定要改成空格換行才行</p>

<p>附上我的:</p>

<figure class='code'><figcaption><span> (com.yahoo.KeyKey.OneKey.plist)</span> <a href='http://blog.buginception.com/downloads/code/com.yahoo.KeyKey.OneKey.plist'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>ShortcutKey<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>
</span><span class='line'><span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>因為我也沒去試別的改法XDrz</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Dropbox來當做Git remote]]></title>
    <link href="http://blog.buginception.com/blog/2012/02/22/use-git-on-dropbox/"/>
    <updated>2012-02-22T01:54:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/02/22/use-git-on-dropbox</id>
    <content type="html"><![CDATA[<p>這篇筆記兼分享一下如何使用<a href="www.dropbox.com">Dropbox</a>簡單建立git remote進行多人協同開發。</p>

<p>當然不是單純的把專案開在Dropbox folder而已，那Source可是會亂掉的:P</p>

<!-- more -->


<p>首先我們在Dropbox建立一個資料夾專門放我們的Project</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~<span class="nv">$ </span><span class="nb">cd </span>Dropbox
</span><span class='line'>~/Dropbox<span class="nv">$ </span>mkdir project
</span></code></pre></td></tr></table></div></figure>


<p>接著建立一個放置repo的資料夾，並且建立git repo</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/Dropbox<span class="nv">$ </span><span class="nb">cd </span>project
</span><span class='line'>~/Dropbox/project<span class="nv">$ </span>mkdir myproj.git
</span><span class='line'>~/Dropbox/project<span class="nv">$ </span><span class="nb">cd </span>myproj.git
</span><span class='line'>~/Dropbox/project/myproj.git<span class="nv">$ </span>git init --bare
</span></code></pre></td></tr></table></div></figure>


<p>這邊用了<code>git init --bare</code>這個指令，它並不會產生<code>.git</code>資料夾，而是會把<code>.git</code>裡面的內容直接產生在目錄下面，並且在往後commit/push到這裡的更動，是不存下source code的，你需要將更動<strong>拉回家</strong>才會有所動作，但是這裡仍然記錄了所有的變動，<code>git init --bare</code>很適合拿來節省空間。</p>

<p>而且使用Dropbox來做remote你也不希望電腦裡有兩份一樣的code在不同的資料夾下吧:)。</p>

<p>接著，我們到本機的repo底下用Dropbox的路徑設定一個新的remote，並且push master branch到<strong>dropbox</strong> remote</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/myproj<span class="nv">$ </span>git remote add dropbox ~/Dropbox/project/myproj.git
</span><span class='line'>~/myproj<span class="nv">$ </span>git push dropbox master
</span></code></pre></td></tr></table></div></figure>


<p>接著把Dropbox裡的repo分享給要co-work的人，對方用同樣的方式在設定一次remote，大功告成:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Yii]Ch.0-3 Yii環境建置]]></title>
    <link href="http://blog.buginception.com/blog/2012/02/09/yii-environment/"/>
    <updated>2012-02-09T16:52:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/02/09/yii-environment</id>
    <content type="html"><![CDATA[<p>這一篇可能是一個比較短的篇幅，來講環境建置的部份，上一篇已經有稍微的講到了環境需求，那我也不在重複一次，接著請下載最新的YiiFramework</p>

<blockquote><p><a href="http://www.yiiframework.com/download/">Yii 官方網站下載</a></p></blockquote>

<p>或者是github上熱心人士非官方的source，目前更新到1.1.9</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/dmtrs/unofficial-yii-framework-mirror.git
</span></code></pre></td></tr></table></div></figure>


<p>解壓縮到網站根目錄下，取個簡單的名字，例如：yii</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tar -xzf yii-1.1.9.r3527.tar.gz
</span><span class='line'><span class="nv">$ </span>mv ./yii-1.1.9.r3527 yii
</span></code></pre></td></tr></table></div></figure>


<p>接下來我們打開Yii requirement頁面來看一下yii系統需求檢查：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>http://localhost/yii/requirements/
</span></code></pre></td></tr></table></div></figure>


<p>可以看到類似下面的畫面：</p>

<p><img src="http://blog.buginception.com/images/article/ch0_3_01.PNG" alt="Yii系統需求檢查" /></p>

<p>如果你是一個新建立的網站環境，可能會有大部分的php extension是未通過的狀況，
上圖中，由於我這邊沒有memcache server所以除了memcache extension之外其餘都是通過的狀態，這邊建議是使用者是YiiFramework的extension是必備的，其餘元件看個人需求安裝。</p>

<ul>
<li><a href="http://pecl.php.net/package/APC">APC</a></li>
<li><a href="http://www.php.net/manual/en/mcrypt.installation.php">mcrypt</a></li>
<li><a href="http://www.php.net/manual/en/memcache.installation.php">Memcache</a></li>
<li><a href="http://www.php.net/manual/en/image.installation.php">GD</a></li>
</ul>


<p>當我們測試完Yii Requirements，可以打開yii demo頁來看看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>http://localhost/yii/demos/blog
</span></code></pre></td></tr></table></div></figure>


<p>可以看到一個採用YiiFramework的Blog：</p>

<p><img src="http://blog.buginception.com/images/article/ch0_3_02.PNG" alt="Yii Blog Demo" /></p>

<p>到這邊為止，可能會遇到Demo頁面遇到以下狀況：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Application runtime path <span class="s2">&quot;/var/www/html/yii/demos/blog/protected/runtime&quot;</span> is not valid. Please make sure it is a directory writable by the Web server process.
</span></code></pre></td></tr></table></div></figure>


<p>或者是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>CAssetManager.basePath <span class="s2">&quot;/var/www/html/yii/demos/blog/assets&quot;</span> is invalid. Please make sure the directory exists and is writable by the Web server process.
</span></code></pre></td></tr></table></div></figure>


<p>這時只要修改一下<strong>assets</strong>跟<strong>protected/runtime</strong>的資料夾權限讓php可以存取，就沒有問題了:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Yii]Ch.0-2 事前準備]]></title>
    <link href="http://blog.buginception.com/blog/2012/01/28/preparation/"/>
    <updated>2012-01-28T16:21:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/01/28/preparation</id>
    <content type="html"><![CDATA[<p>上篇我提到了在PHP裡採用Yii框架有什麼好處，那麼這次開始就要來提到如何採用Yii，需要哪些事前準備.</p>

<p>用Yii來開發Web Application，你必須要有PHP的基礎這是一定的，在之後我所講的内容基本上都是預設讀者有基本的PHP知識，另外還需要有PHP OOP的相關知識或者實戰經驗。</p>

<!-- more -->


<p>進入正題，我們開發yii需要什麽事前準備呢:</p>

<h3>1. 開發環境</h3>

<p>開發環境，重點當然是一臺電腦，不管是Windows，OSX，Linux的作業系統，用的順手就好，我個人是用2010年的MBA來做爲我開發的平臺，另外還用虛擬機安裝了一台Ubuntu Server 11.10，作爲測試環境.</p>

<p>PHP runtime的版本是5.3.5，這邊建議PHP的版本最好是5.3以上，因爲5.3跟5.2在OOP的GC機制上有做了重大的改變，效率更好，memory leak的情形大幅减少.</p>

<h3>2. 編輯器</h3>

<p>我採用過的編輯器很多，編輯器也是用的順手就好，好的工具可以讓開發的時間縮短，開發起來更方便，更易於找尋錯誤，但是並沒有哪個比較好的問題，高手用記事本也還是高手。</p>

<p>這邊推薦幾個編輯器:</p>

<ol>
<li><h4><a href="http://aptana.com">Aptana Studio</a></h4>

<p>從eclipse衍申而來的老牌IDE，跨平台，我學生時期一直到剛進公司都是採用Aptana在做開發，優點是跨平台，eclipse plugin眾多，本身支援JavaScript的開發，有多種JavaScript Framework如jQuery，Prototype，extJS的自動提示功能，缺點就是太肥大了，OSX上使用有時候感覺不是很順，還會發呆:(</p></li>
<li><h4><a href="http://macromates.com/">TextMate</a></h4>

<p>熟悉Ruby開發的開發者不可能不知道的一個編輯器，也是老牌子了，不過中文支援有很大的問題。付費軟體</p></li>
<li><h4><a href="http://www.sublimetext.com/2">Sublime text 2</a></h4>

<p>我現在使用的編輯器之一，介面漂亮，跨平台，Plugin也不少，而且免費使用，中文也沒有問題，而且除了PHP，其他語言的支援性也很好，尤其是Python，沒事會寫寫Python的玩家們，我很推薦這一套編輯器。</p></li>
<li><h4><a href="http://www.vim.org/">vim</a></h4>

<p>常操作unix系的OS必學的編輯器，有很多的plugin，當然terminal下只有全鍵盤的操作方式，但是習慣了實在是會上癮，我連sublime text都有加入vim的操作快捷，可見對其操作中毒之深，我常常會有機會直接ssh到測試server上修改一些小東西，vi/vim的操作是必學的。</p></li>
</ol>


<h3>3. 版本控制</h3>

<p>我傾向於一開始學習程式設計，就要跟著學習版本控制系統的使用，目前我個人使用都是用Git來做為我的版本控制系統，Mac本身就內建了Git，很是方便，而公司則是SVN/Git兩種系統來管理的專案皆有，使用版本控制系統能夠有效的來管理專案，尤其是多人開發的時候，有效的來掌控原始碼，甚至在準備deploy專案的時候也派的上用場。</p>

<p>如果要採用Git，可以先看看這篇 <a href="http://rogerdudler.github.com/git-guide/">Git - the simple guide.</a> 簡單的了解到Git是怎麼樣的一個系統，另外，也去申請一個 <a href="http://www.github.com">GitHub</a> 的帳號，除了免費的remote server之外，也可以從這個龐大的PG社群獲得許多的技術寶物。</p>

<blockquote><p>工欲善其事，必先利其器</p></blockquote>

<p>有了好的開發環境與工具，可以讓專案的開發事半功倍，加速開發的時間與效率，但是有了方便的開發工具，也別忘了打好基礎，雄厚的語言基礎與知識才是最強大的後盾與武器。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Yii]Ch.0-1 YiiFramework簡介 ]]></title>
    <link href="http://blog.buginception.com/blog/2012/01/22/why-use-yii/"/>
    <updated>2012-01-22T19:55:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/01/22/why-use-yii</id>
    <content type="html"><![CDATA[<p>PHP的framework非常的多樣,隨手拈來都可以講出很多,舉例如老牌的<a href="http://cakephp.org/">CakePHP</a>, <a href="http://framework.zend.com">Zend</a>, <a href="http://www.symfony-project.org/">Symfony</a>, <a href="http://codeigniter.com">CodeIgniter</a>,或者是<a href="http://www.slimframework.com">SlimFramework</a>,抑或者最近常聽到的<a href="http://fuelphp.com">fuelPHP</a>,到我所要提到的<a href="http://www.yiiframewok.com">Yii</a>.</p>

<p>Yii,為什麼要採用Yii? 這邊有幾點來稍微簡介一下:</p>

<h3>1. High Performance</h3>

<p>官網比較了同樣未採用APC與使用APC之後的RPS數據,Yii 在未使用APC的狀況下,RPS大約比CI多約15%,Cake的3倍,但在使用了APC之後Yii的RPS是CI的3倍,Cake的8倍,Symfony的13倍</p>

<p>至於Yii為何能做到?</p>

<!-- more -->


<p>主要的原因應該在於整個Yii Framework大量採用了lazy loading的技巧,舉例來說,在一個class file未被使用之前,這個檔案不會被include,在一個物件將要被使用之前Yii也不會初始化該物件,其他框架的缺點在於縱使未被使用或沒有被Request的功能例如DB connection,user session等,都還是被framework本身所啟用。</p>

<h3>2. MVC pattern</h3>

<p>Yii相當完整的實作了MVC模式,MVC模式是近年來相當熱門的設計模式,概念上相當合理分離了商業邏輯與流程管控,但是實務上的MVC其實常常容易走調,這我之後有機會會在提到,簡而言之,在第一線講究使用者體驗的軟體實作上(包含了web,mobile app)MVC模式是相當熱門的模式,舉凡RoR,Spring,ASP.net,皆有MVC模式的實作. 當然許多的PHP framework也實作了MVC模式,Yii的MVC實作基本上參考了Rails.</p>

<h3>3. ActiveRecord</h3>

<p>Yii實作了ActiveRecord,講到ActiveRecord不得不講到Rails,Rails便是採用ActiveRecord模式來做為ORM框架,ActiveRecord Class代表資料庫中的一張表,每個ActiveRecord實體都對應了一筆記錄,ActiveRecord模式的特性讓我們可用快速的採用物件導向的方式來控制資料庫,ActiveRecord可以說是Yii跟Rails的ORM類,但是ActiveRecord跟一般所說的ORM如Java的Hibernate又有很多不同,它實作起來更為快速,直覺。</p>

<h3>4. Unit Test</h3>

<p>TDD一直都是很多人在推廣的開發方式,Yii本身支援了基於PHPUnit以及Selenium的單元測試,在Gii產生Model的ActiveRecord類別後會自動產生一個相對應的測試類別.</p>

<h3>5. Automatic Code Generation</h3>

<p>Yii擁有相當程度的自動產出功能,建立好一張Table後,便可以採用內建的產生器,產出初期MVC雛形,整個CRUD流程,包含Model,Controller,到前端的表單,都可以在一瞬間建立,省去初期煩人的建置時間.</p>

<p>Yii框架還有相當多的特性,將會在往後的文章裡面提到,另外Yii是由居住於華盛頓DC的華人Qing Xue所設計的PHP框架,這在這個圈子是很難得的,而Yii也已經累積了不少使用者,希望這個框架能夠繼續的發展下去,成為PHP其中一個優秀的App Framework.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Yii]繁體中文教程大綱]]></title>
    <link href="http://blog.buginception.com/blog/2012/01/19/yii-zhhant-tutorial-catelog/"/>
    <updated>2012-01-19T01:03:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/01/19/yii-zhhant-tutorial-catelog</id>
    <content type="html"><![CDATA[<p>用PHP&amp;YiiFramework開發專案也一年多了,心中一直有個小小的計畫,Yii大部分的中文資源都是簡體中文,一直想要動筆寫YiiFramework的繁體中文tutorial,但是自己本身也有工作,所以在這篇文章裡面我想先訂出整個教程的大綱</p>

<p>撰寫方面,基本上我會參考官方英文版的教程加上我個人在開發專案上的經驗來完成這個繁體中文的文件</p>

<p>當然,這個大綱頁面的內容可能會無限制的增加:),想到可以寫的就會加上,直到我寫不下去為止</p>

<p>另外未來如果在文章上有任何的錯誤,歡迎提出指正</p>

<!-- more -->


<ol>
<li>Ch.0 為何採用Yii?

<ul>
<li><a href="http://blog.buginception.com/blog/2012/01/22/why-use-yii/">Yii簡介</a></li>
<li><a href="http://blog.buginception.com/blog/2012/01/28/preparation/">事前準備</a></li>
<li><a href="http://blog.buginception.com/blog/2012/02/09/yii-environment/">環境建置</a></li>
<li><a href="http://blog.buginception.com/blog/2012/03/23/yii-say-hello-for-world/">使用yiic建立第一個webapp</a></li>
</ul>
</li>
<li>Ch.1 從基礎開始:

<ul>
<li><a href="http://blog.buginception.com/blog/2012/04/29/yii-mvc-structure/">MVC架構</a></li>
<li>引導頁面(bootstrap)</li>
<li>Yii應用設定</li>
<li>Controller</li>
<li>Model</li>
<li>View</li>
</ul>
</li>
<li>Ch.2 快速建構:

<ul>
<li>Component</li>
<li>使用者與認證</li>
<li>模組化</li>
<li>別名與命名空間</li>
<li>流程管理</li>
<li>Gii</li>
<li>Migration</li>
</ul>
</li>
<li>Ch.3 Model

<ul>
<li>Model概述與建立Model</li>
<li>DAO</li>
<li>屬性規則</li>
<li>查詢範圍</li>
<li>資料關連</li>
<li>Criteria簡介</li>
</ul>
</li>
<li>Ch.4 Controller

<ul>
<li>Controller概述</li>
<li>建立Action</li>
<li>權限控管</li>
</ul>
</li>
<li>Ch.5 Criteria 查詢標準</li>
<li>Ch.6 View

<ul>
<li>使用template</li>
<li>Yii helper</li>
<li>JavaScript部分</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Yii]Assign Attribute's issue]]></title>
    <link href="http://blog.buginception.com/blog/2012/01/11/yii-assign-attributes/"/>
    <updated>2012-01-11T15:28:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/01/11/yii-assign-attributes</id>
    <content type="html"><![CDATA[<p>通常情況下，我們習慣這樣來給予Model值</p>

<figure class='code'><figcaption><span>FooController</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">//....上略</span>
</span><span class='line'><span class="nv">$model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;Foo&#39;</span><span class="p">])){</span>
</span><span class='line'>  <span class="nv">$model</span><span class="o">-&gt;</span><span class="na">attributes</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;Foo&#39;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>這叫做 <strong>massively assigned</strong></p>

<!-- more -->


<p>而輸出json時我們會使用CJSON來encode</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">//....上略</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">CJSON</span><span class="o">::</span><span class="na">encode</span><span class="p">(</span><span class="nv">$model</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>問題來了,有時我們同時做 <strong>massively assigned</strong> 再輸出JSON時, 接收的一方(也許是mobile phone) 怎麽parse都parse不出我們encode的JSON</p>

<p>這時候就要注意你的Model有没有問題了,因爲<strong>massively assigned</strong>是不允許<strong>unsafe attribute</strong>的
請檢查你的Model::rules()</p>

<figure class='code'><figcaption><span>Model:Foo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">rules</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//略</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>檢查你的model attribute有無遺漏,因爲有時候因爲新的需求,在db加入新的schema,而忘了在Model裏加入新的rule,這個attribute就會變成unsafe,會在YII_DEBUG出現錯誤訊息,output buffering也會出現長度3的空白string,JSON當然就parse不出來了</p>

<p>我建議在新增column時,還是使用migration,比較安全:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[轉換至Octopress.]]></title>
    <link href="http://blog.buginception.com/blog/2012/01/05/switching-from-tumblr-to-octopress/"/>
    <updated>2012-01-05T18:19:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/01/05/switching-from-tumblr-to-octopress</id>
    <content type="html"><![CDATA[<p>由於Tumblr 最近實在有點不穩，於是從Tumblr 轉到 Octopress</p>

<p>至於Octopress有什麼好處跟特點，很多前輩高人都闡述過了，我就不多囉嗦了</p>

<p>如果還是想知道的請見 <a href="http://blog.xdite.net/posts/2011/10/07/what-is-octopress/">Why Octopress?</a> via xDite</p>
]]></content>
  </entry>
  
</feed>
