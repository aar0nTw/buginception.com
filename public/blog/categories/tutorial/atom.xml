<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial | [bug:inception]]]></title>
  <link href="http://blog.buginception.com/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://blog.buginception.com/"/>
  <updated>2013-01-19T03:49:42+08:00</updated>
  <id>http://blog.buginception.com/</id>
  <author>
    <name><![CDATA[Aaron Huang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[蕃茄工作法的二三事]]></title>
    <link href="http://blog.buginception.com/blog/2012/09/16/something-about-pomodoro/"/>
    <updated>2012-09-16T02:14:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/09/16/something-about-pomodoro</id>
    <content type="html"><![CDATA[<p><img src="/images/845771234133967.png" alt="image" /></p>

<p>(image via <a href="http://www.behance.net/speltospel">Vladimir Pospelov</a>)</p>

<blockquote><p>上週二，不小心參與了 <a href="http://jonathanspeaking.blogspot.tw/">Joanthan</a> 號招的 <a href="https://www.facebook.com/AgileCommunity.tw">AgileCommunication.TW</a>，形式是每個人五分鐘的閃電秀，Pomodoro 蕃茄工作法，就是我在這五分鐘裡面分享的題目。我在今年初的時候偶然的情況下看見同事電腦上的蕃茄鐘 App，經由同事的介紹，而開始使用蕃茄鐘。說實在五分鐘有點短，因此這篇算是再整理一下我在實際運用 Pomodoro 上的心得與感想 :)</p></blockquote>

<!-- more -->


<p></p>


<p>說在前頭，其實我覺得每個人<strong>五分鐘</strong>的閃電秀分享，加上將近一個小時的 <strong>Social Time</strong>，其實是非常不錯的聚會形式，有些聚會可能就一兩個講者在台上分享一個小時，但是後續的討論與對話就稍嫌薄弱了，每個人參與到的僅止於接收，後續的討論，眾人的參與度就少了點。但是每個人都上去講五分鐘，狀況又不太一樣了，個人感覺這樣的形式後續的討論力道滿夠的，由於每個人都有小小的分享，對每個人就會有些小小的熟悉度，而且大家都有參與到整個活動，這樣看起來後面的 Social Time 的確帶來了更多的討論與分享，缺點就是閃電秀真的是太短了 XD</p>

<script async class="speakerdeck-embed" data-id="504f5a72256d920002005104" data-ratio="1.3333333333333333" src="http://blog.buginception.com//speakerdeck.com/assets/embed.js"></script>


<p>上面是我簡單的 Slide，真的非常簡單，去頭去尾只剩四張，搔癢搔的不太夠，所以才會有這篇文。</p>

<p></p>


<h3>什麼叫蕃茄工作法？</h3>

<p>蕃茄工作法，簡單的說就是一種個人的時間管理法，最近幾年，Agile 的議題是漸漸的熱門了起來，近兩年慢慢的可以看到網路上討論例如：Scrum、XP 等等的敏捷開發方法，公司敏捷了起來、團隊敏捷了起來，但是這些工作法其實還是比較偏向於整體團隊的開發方法，那我們個人呢？身為一個軟體開發者，整個團隊、公司敏捷起來之前，我們個人也應該要進入所謂<strong>敏捷</strong>的方法，一起敏捷起來，那蕃茄工作法呢，其實就可說是一個屬於個人的、短單位時間的 Agile。</p>

<p>為什麼要提到個人的敏捷呢？因為縱使團隊尚在磨合，也許還沒有達到所謂敏捷方法的要求，但是每個人還是可以從改變自身的工作方法開始，畢竟腦袋身體是自己的，統合自己達到要求，比統合整個團隊達到要求要來的容易多了，不是嗎？所以整個團隊從我們自己開始，先讓一小部分敏捷起來，再讓整個團體敏捷起來(?)</p>

<p>蕃茄工作法，最常聽到的就是所謂每工作 25 分鐘，休息 5 分鐘，稱為一個蕃茄鐘，而每個蕃茄鐘之間不斷循環。的確是相當單純的定義，但是，其實蕃茄工作法，著重的並非數字上的時間，而是整體工作的<strong>步調</strong>與<strong>節奏</strong>，採用蕃茄工作法的人，總是維持著一個每半小時之中休息五分鐘的快速工作節奏，這樣的工作步調，讓人不至於一下子工作太久，造成生心理上的負擔，總是保持的五分鐘的休息時間，但也不會休息太久讓人脫離工作狀況。</p>

<h3>計畫與紀錄</h3>

<p>要使用蕃茄工作法的工具很簡單，一枝筆、一張紙、一個簡單的定時器。</p>

<p>每一天的開始，我們將會計畫今天一整天的待辦事項、清單，嘗試的運用蕃茄鐘單位（25 分鐘）來估算並寫上每一個事項或項目會花上多少蕃茄鐘。當然，不一定是要在每天早上就詳細的規劃今天的待辦事項，因為事情總有突然，每天的下午，如果在早上又有新的任務，那麼可以重新的來審視自己的工作清單項目，我們可以重新的來安排，並且根據狀況來估計。假設某一天的下午，我希望自己能夠做完 6 個蕃茄鐘，那就是三個小時的工作時間，早上的會議也有一些新的項目，那麼就在這 6 個單位內，盡可能的排入最多可完成的工作。</p>

<p>對於蕃茄工作法來說，紀錄與計畫是相同重要的，尤其是剛開始使用蕃茄工作法的人。假設一個 Task 自己估計需要三個蕃茄鐘來完成，那麼每完成一個蕃茄鐘，看是在自己的清單上做個記號，或是運用一些工具網站（如 <a href="http://trello.com">Trello</a> 的 checklist 功能）來紀錄實際狀況，詳細的紀錄這個 Task 也許只花了兩個鐘就完成了，或是花了四個蕃茄鐘才完成，以及被中斷了幾次，這些狀況都要好好的記錄下來，當我們回頭 Review 的時候，透過詳細的紀錄，慢慢的改善自己的工作情況，透過詳細的紀錄，也會發現，估算工作時間會越來越準確，所以使用蕃茄工作法時，別忘了透過一些方便的清單工具，會達到更好的效果。</p>

<h3>放鬆與衝刺</h3>

<p>蕃茄工作法提倡的作法是，在 5 分鐘的休息時間中，要盡可能的放鬆心情與休息，5 分鐘結束的蕃茄鐘一響，我們應該馬上進入下一個 25 分鐘的衝刺階段，這段期間，就是專注在工作上，全力衝刺，直到蕃茄鐘的鈴聲響起。</p>

<p>那麼，當我們全力工作的時候，如果分心不在工作上了，或是遇到可能其他人有問題之類的突發狀況，那我們就必須要紀錄這次的中斷，並且在中斷結束之後，重新開始一個 25 分鐘的衝刺，千萬不可以接著前面未完成的時間，由中間開始，這將會嚴重影響工作步調。</p>

<p>分心、中斷又可以分為是個人的因素或是外部的因素，有時候自己可能工作到一半，想要看個 Facebook 啊，或是水喝太多，尿急啊等等之類的，當然，尿急就快去尿，忍尿是不好的。至於分心摸魚這件事，經過前面所謂詳細的紀錄之後，可以好好督促自己，減少自己在 25 分鐘衝刺階段分心的次數，達到更好的工作效率。而外部因素的中斷，就要好好的分析與反應了，如果今天事情非常的緊急，例如負責的線上 Production 環境的服服務掛掉了，當然要馬上處理，但是如果是一些可以延後處理或不是那麼緊急的事項，我們或許可以請對方稍等一下，免去中斷衝刺狀態的情況。</p>

<h3>自我修煉</h3>

<p>任何工作方法，最後取決的依然是人，一個團隊縱使導入許多敏捷開發方法，如果團隊裡的成員沒有跟著動起來，那再好的方法也是徒勞，所以整個團隊要 Agile，就應該從自己開始。嘗試的運用蕃茄工作法讓自己更加的 Agile。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Yii]Ch.1-1 MVC 架構]]></title>
    <link href="http://blog.buginception.com/blog/2012/04/29/yii-mvc-structure/"/>
    <updated>2012-04-29T01:32:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/04/29/yii-mvc-structure</id>
    <content type="html"><![CDATA[<p>MVC 模式，這個模式的概述，應該是已經講到爛掉的 topic 了，所以這篇我主要想從 Yii 對於 Model-View-Controller 的相關實作方式來切入。</p>

<blockquote class="note">
<p>
如果真的不了解 MVC 模式，我想從 Wikipedia 開始會是不錯的選擇 XD
</p>
</blockquote>


<p></p>

<p>除了 MVC 模式之外，Yii 還有一個名為 Application 的 front-controller，Application 可稱為 Yii 的統整中心，負責處理並分配 User 所有的 Request，整個 Yii app 的結構可以看下面這張示意圖:</p>

<p><img src="/images/yii-static-struct.png" alt="" /></p>

<!-- more -->


<p>Yii MVC 實作主要在下方這幾個類別</p>

<ul>
<li><strong>Model</strong> : CActiveRecord &lt; CModel</li>
<li><strong>Controller</strong> : CController , CAction</li>
<li><strong>View</strong> : CController , CViewRenderer , CPradoRenderer</li>
</ul>


<h2>Model</h2>

<p>Yii 自行實作了自己的 ORM 類別： <strong>CActiveRecord</strong> ， 從名字上可以看得出來，它是以 ActiveRecord Design Pattern 做為藍本來建構的。</p>

<blockquote class="note">
<p>
如果你同時也是個 Rails 的開發者，我想對 ActiveRecord Pattern 是在熟悉不過了。  當然，除了 Yii 之外，許多其他的 PHP framework 也有實作 ActiveRecord，包含了 CakePHP、FuelPHP、CodeIgniter 等等。
</p>
</blockquote>


<p>每一個繼承自 ActiveRecord 的類別，都代表資料庫中的一張 table ，而每一個ActiveRecord 的實體都代表著一筆紀錄，資料庫的所有 CRUD 的操作都被實作在 ActiveRecord 類別裡面，因此我們可以用 OO 的方式更輕鬆的來處理我們的資料。</p>

<p>舉例來說，如果我們想新增一筆資料在 Foo 這張資料表中，我們可以透過下面這樣
的方式：</p>

<p><code>php
&lt;?php
$foo = new Foo;
$foo -&gt; name = 'Bar';
$foo -&gt; save();
</code></p>

<p>Yii 中，透過了 <code>CDbConnection</code> 來處理資料庫連線的部分，可以在 <code>config/main.php</code> 中設置資料庫連線：</p>

<p>```php config/main.php
&lt;?php
…略
'db' => array(</p>

<pre><code>'class' =&gt; 'system.db.CDbConnection', // 預設是不需要定義 class 的
'connectionString' =&gt; 'sqlite:path/to/dbfile'
</code></pre>

<p>)
```</p>

<p>如果是 MySQL 設定：</p>

<p>```php
&lt;?php
…略
'db' => array(</p>

<pre><code>'connectionString' =&gt; 'mysql:host=yourhost;dbname=yourdbname',
'emulatePrepare' =&gt; true,
'username' =&gt; '',
'password' =&gt; '',
'charset' =&gt; 'utf8',
</code></pre>

<p>)
```</p>

<blockquote class="note">
<p>
Yii 的資料庫設定中，有一項名為 schemaCachingDuration 的設定參數，當這個參數的值 > 0 時，會打開資料庫 metadata 的快取，如果是在 production 環境下，資料表的結構很少變動了，應該要打開這個設定，以節省讀取資料表結構的時間。
</p>
</blockquote>


<h2>Controller</h2>

<p>Yii app 的 Controller 如下所示：
<code>php
&lt;?php
class FooController extends Controller
{
// some code...
}
</code>
其中 <code>Controller</code> 也是繼承自 <code>CController</code>，它的位置在 <code>protected/component/</code> 資料夾下，所有透過 <strong>yiic</strong> 或是 <strong>gii</strong> 所產生的 Controller 都會繼承自 <code>Controller</code> 這個類別，方便定義全站 Controller 共同的方法與變數。</p>

<p>Yii 透過 application 中的 url route 來判斷 Controller 與 Action ，不管是 Controller 或是 Action 都是透過 ID 來判斷，這之後再深入探討，簡單來說如果你希望呼叫 <code>FooController -&gt; actionBar()</code> url route 就會是 <code>foo/bar</code>。</p>

<blockquote class="note">
<p>
你可以修改 <code>config/main.php</code> 中的 <code>urlManager</code> 來自定義 url route。
</p>
</blockquote>


<p>Controller 的實作部分，可以分為 <code>CController</code> 與 <code>CAction</code>這兩個模組來解釋，<code>CController</code> 類別與其子類別回應使用者的 Request 並將其對應到 Action。 一個使用者發送 Request 到 <code>actionBar</code> 時，Controller 會經過下面的流程：</p>

<ol>
<li><strong>Method-based action</strong> ： 尋找 Controller 中是否有名為 <code>actionBar</code> 的 method，如果有，便執行它。</li>
<li><strong>Class-based action</strong>：如果沒有 Method-based action ，便搜尋 <strong>action class map</strong> ，（ class map 定義在 Controller 中的 <code>actions()</code> 方法 ) 如果 class map 中有定義名為 Bar 的 <code>CAction</code> 類別，便新增一個 Bar 的實體，並執行 <code>Foo -&gt; run()</code> 方法。</li>
<li><strong>Call missingAction()</strong>：如果都找不到，將會執行 <code>missingAction()</code> 方法，你可以複寫這個方法，預設是拋出 <code>404 HttpException</code>。</li>
</ol>


<blockquote class="note">
<p>
如果使用者並沒有要求任何 Action ， Controller 將回傳 <code>defaultAction</code>，預設是 actionIndex，當然，你也可以指定其他的 action 作為 defaultAction。
</p>
</blockquote>


<p>除了在 Controller 中定義 action 方法之外，我們也可以採用所謂的 <strong>Class-based action</strong> 的方式來定義 action，往後的篇章再做說明。</p>

<h2>View</h2>

<p>Yii 中的 View Render，我們可以透過 <code>CController::render</code> 來呼叫 View 檔案，預設的 view 檔案會放在 `protected/views/ControllerID/ 這個資料夾下，因此我們在 action 方法中可以呼叫 render() 來呼叫 View ：</p>

<p>```php
&lt;?php
class FooController extends Controller
{
 public actionBar()
 {</p>

<pre><code>$this -&gt; render('bar');
</code></pre>

<p> }
}
```</p>

<p>當使用者呼叫 <code>actionBar()</code> 時，Controller 會找到在 <code>protected/views/foo/</code> 資料夾中的 <code>bar.php</code> 並顯示在使用者的畫面上，完成這次的 Request。 在 view script 檔案中，我們可以透過 <code>$this</code> 來存取 render view 的 controller 實體，Yii 稱這種方式為 <code>pull</code>，我們也可以透過所謂 <code>push</code> 的方式，直接在 render 的時候將資料送進 view 檔案中：</p>

<p>```php
&lt;?php
public actionBar()
{</p>

<pre><code>$this -&gt; render('bar', array(
    'var'=&gt;$value
));
</code></pre>

<p>}
<code>``
以上面的範例來說，我們可以直接在 view 之中使用名稱為</code>$var` 的變數：</p>

<p>```php protected/views/foo/bar.php
&lt;?php</p>

<pre><code>//用 pull 的方式 存取 FooController 的 layout 屬性
echo $this -&gt; layout;

//存取 controller push 過來的 var 變數
echo $var;
</code></pre>

<p>?>
```</p>

<p>Yii 也支援使用者使用自定義的 template syntax，可以透過繼承 <code>CViewRenderer</code> 定義自己設計的特殊 syntax。設計好了 View Renderer 只需要在 <code>config/main.php</code> 中設定：</p>

<p>```php protected/config/main.php
&lt;?php
...</p>

<pre><code>'components'=&gt;array(
    ...
    'viewRenderer'=&gt;array(
        'class'=&gt;'path/to/your/ViewRender',
    ),
),
</code></pre>

<p>```</p>

<blockquote class="note">
<p>
Yii 本身內建了 PradoViewRenderer，只要在設定檔將 viewRenderer class 設定為 <code>CProdoViewRenderer</code> 就可以使用 <a href="http://www.pradosoft.com/demos/quickstart/?page=Configurations.Templates1">Prado</a> 的 template 語法。
</p>
</blockquote>


<h2>再複習一次</h2>

<p>使用者的一個 Request 進入Yii 從 <code>index.php</code> 開始，然後開啟了一個 <code>CWebApplication</code> 透過 url router 導入到正確的 Controller，Controller 管理並選擇使用者呼叫的 <strong>Action</strong>，Action 中，可能開啟調用資料庫的 ActiveRecord 取得資料庫資料，最後將畫面 Render 出來，完成一次 Request。</p>

<p>整個 Yii 對 MVC 的實作概念解說大概到這邊，下次將從 EntryScript 開始深入探究 YiiFramework :)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Yii]Ch.0-4 建立第一個Web app]]></title>
    <link href="http://blog.buginception.com/blog/2012/03/23/yii-say-hello-for-world/"/>
    <updated>2012-03-23T19:25:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/03/23/yii-say-hello-for-world</id>
    <content type="html"><![CDATA[<blockquote><p>最近公事繁忙，一回神已經兩週沒更新blog了orz。
現在Yii framework，已經merge到github上了，可以clone下來對yii作版本管理:)</p></blockquote>

<p><code>bash
$ git clone https://github.com/yiisoft/yii.git
</code></p>

<p>前面講到的部分，基本上是屬於環境配置的部分，接下來我們要正式的進入實作階段:)</p>

<p>首先建立一個新的Web App
（這邊以~/htdocs 為網站根目錄）</p>

<p><code>bash
$ yiic webapp ~/htdocs/demo
</code></p>

<!-- more -->


<p>yiic是YiiFramework內建的一個console工具可以快速建立web app，作migration，shell模式下可以建立model，scaffold，module等等，建議使用強大的網頁介面Gii，不過我還是習慣用console :D</p>

<p>建立了一個新的web app之後，首先我們可以看到資料夾內作為bootstrap的index.php，這邊稍微簡單講一下：</p>

<p>```php index.php
&lt;?php</p>

<p>// change the following paths if necessary
$yii=dirname(<strong>FILE</strong>).'/../yii/framework/yii.php';
$config=dirname(<strong>FILE</strong>).'/protected/config/main.php';</p>

<p>// remove the following lines when in production mode
defined('YII_DEBUG') or define('YII_DEBUG',true);
// specify how many levels of call stack should be shown in each log message
defined('YII_TRACE_LEVEL') or define('YII_TRACE_LEVEL',3);</p>

<p>require_once($yii);
Yii::createWebApplication($config)->run();
```</p>

<p>可以看到require了yii.php（Production環境可以改用yiilite.php），定義了DEBUG跟TRACE_LEVEL。
這兩個常數會決定yii會不會寫入log，以及log與錯誤訊息顯示的詳細程度。</p>

<p>Production環境中為了提高app的performance這兩個常數會定義為false跟0。</p>

<p>然後我們可以看到Yii將會以$config變數指定的config檔案開啟一個yii app。</p>

<p>首先我們要了解一下Yii的檔案結構:</p>

<p><code>bash demo/
drwxrwxrwx   3 aaron  staff  102 Mar 23 16:36 assets
drwxr-xr-x   8 aaron  staff  272 Mar 23 11:39 css
drwxr-xr-x   2 aaron  staff   68 Mar 23 11:39 images
-rw-r--r--   1 aaron  staff  497 Mar 23 11:41 index-test.php
-rw-r--r--   1 aaron  staff  574 Mar 25 03:35 index.php
drwxr-xr-x  18 aaron  staff  612 Mar 23 11:39 protected
drwxr-xr-x   3 aaron  staff  102 Mar 23 11:39 themes
</code></p>

<p>assets的部分，其實就是運用<code>CAssetsManager</code>類別來控管或自動產出包括js,css等有可能造成衝突的檔案，有機會在詳細的討論，css,images，可以不透過Yii直接引用的靜態css,image檔案，theme則是不使用預設的them template時，放上自己或是別人寫的theme。 protected資料夾則是整個yii app的靈魂所在，這邊我們就另外的來看一下。</p>

<p><code>bash demo/protected/
   -protected
   |---commands
   |-----shell
   |---components
   |---config
   |---controllers
   |---data
   |---extensions
   |---messages
   |---migrations
   |---models
   |---runtime
   |---tests
   |-----fixtures
   |-----functional
   |-----report
   |-----unit
   |---views
   |-----layouts
   |-----site
   |-------pages
</code></p>

<p>protected資料夾簡單分成幾個部分：</p>

<ul>
<li>components</li>
<li>config</li>
<li>controllers</li>
<li>extensions</li>
<li>models</li>
<li>tests</li>
<li>views</li>
</ul>


<p><strong>components</strong>放置一些可以重用的開發者自行定義的元件
<strong>config</strong>是全站的設定檔，包含網站與cosole app還有測試環境的設定</p>

<p><strong>controllers</strong>,<strong>models</strong>,<strong>views</strong>三個資料夾是放置mvc結構的檔案，<strong>controllers</strong>裡面的class name跟views裡的檔案結構是有相對應的關係的，預設裡面有一個<strong>SiteController</strong>，<strong>views</strong>裡面會有相對應的<strong>site</strong>資料夾存放他的前端呈現的頁面。<strong>models</strong>則是放置了所有資料庫相關的<strong>ActiveRecord</strong> Class。</p>

<p><strong>tests</strong>資料夾則是放置PHPUnit的測試scripts，使用gii或是yiic shell產生Model時，會自動的產生出相對應的ModelTest類別，對有做單元測試的開發者來講可以相當方便的使用PHPUnit來作測試，也支援使用Selenium來作功能測試。</p>

<p>Yii整體的優點其實很多，就這篇的資料夾結構來講可以看出，其Yii已經幫你產出了測試框架，在做UnitTest,Functional Test可以很快的進入狀況，尤其實你是屬於採用TDD方法來開發的開發者。:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Yii]Ch.0-3 Yii環境建置]]></title>
    <link href="http://blog.buginception.com/blog/2012/02/09/yii-environment/"/>
    <updated>2012-02-09T16:52:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/02/09/yii-environment</id>
    <content type="html"><![CDATA[<p>這一篇可能是一個比較短的篇幅，來講環境建置的部份，上一篇已經有稍微的講到了環境需求，那我也不在重複一次，接著請下載最新的YiiFramework</p>

<blockquote><p><a href="http://www.yiiframework.com/download/">Yii 官方網站下載</a></p></blockquote>

<p>或者是github上熱心人士非官方的source，目前更新到1.1.9</p>

<p><code>bash
$ git clone https://github.com/dmtrs/unofficial-yii-framework-mirror.git
</code></p>

<p>解壓縮到網站根目錄下，取個簡單的名字，例如：yii</p>

<p><code>bash
$ tar -xzf yii-1.1.9.r3527.tar.gz
$ mv ./yii-1.1.9.r3527 yii
</code></p>

<p>接下來我們打開Yii requirement頁面來看一下yii系統需求檢查：</p>

<!-- more -->


<p><code>
http://localhost/yii/requirements/
</code></p>

<p>可以看到類似下面的畫面：</p>

<p><img src="/images/article/ch0_3_01.PNG" alt="Yii系統需求檢查" /></p>

<p>如果你是一個新建立的網站環境，可能會有大部分的php extension是未通過的狀況，
上圖中，由於我這邊沒有memcache server所以除了memcache extension之外其餘都是通過的狀態，這邊建議是使用者是YiiFramework的extension是必備的，其餘元件看個人需求安裝。</p>

<ul>
<li><a href="http://pecl.php.net/package/APC">APC</a></li>
<li><a href="http://www.php.net/manual/en/mcrypt.installation.php">mcrypt</a></li>
<li><a href="http://www.php.net/manual/en/memcache.installation.php">Memcache</a></li>
<li><a href="http://www.php.net/manual/en/image.installation.php">GD</a></li>
</ul>


<p>當我們測試完Yii Requirements，可以打開yii demo頁來看看：</p>

<p><code>
http://localhost/yii/demos/blog
</code></p>

<p>可以看到一個採用YiiFramework的Blog：</p>

<p><img src="/images/article/ch0_3_02.PNG" alt="Yii Blog Demo" /></p>

<p>到這邊為止，可能會遇到Demo頁面遇到以下狀況：
<code>
Application runtime path "/var/www/html/yii/demos/blog/protected/runtime" is not valid. Please make sure it is a directory writable by the Web server process.
</code></p>

<p>或者是</p>

<p><code>
CAssetManager.basePath "/var/www/html/yii/demos/blog/assets" is invalid. Please make sure the directory exists and is writable by the Web server process.
</code></p>

<p>這時只要修改一下<strong>assets</strong>跟<strong>protected/runtime</strong>的資料夾權限讓php可以存取，就沒有問題了:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Yii]Ch.0-2 事前準備]]></title>
    <link href="http://blog.buginception.com/blog/2012/01/28/preparation/"/>
    <updated>2012-01-28T16:21:00+08:00</updated>
    <id>http://blog.buginception.com/blog/2012/01/28/preparation</id>
    <content type="html"><![CDATA[<p>上篇我提到了在PHP裡採用Yii框架有什麼好處，那麼這次開始就要來提到如何採用Yii，需要哪些事前準備.</p>

<p>用Yii來開發Web Application，你必須要有PHP的基礎這是一定的，在之後我所講的内容基本上都是預設讀者有基本的PHP知識，另外還需要有PHP OOP的相關知識或者實戰經驗。</p>

<!-- more -->


<p>進入正題，我們開發yii需要什麽事前準備呢:</p>

<h3>1. 開發環境</h3>

<p>開發環境，重點當然是一臺電腦，不管是Windows，OSX，Linux的作業系統，用的順手就好，我個人是用2010年的MBA來做爲我開發的平臺，另外還用虛擬機安裝了一台Ubuntu Server 11.10，作爲測試環境.</p>

<p>PHP runtime的版本是5.3.5，這邊建議PHP的版本最好是5.3以上，因爲5.3跟5.2在OOP的GC機制上有做了重大的改變，效率更好，memory leak的情形大幅减少.</p>

<h3>2. 編輯器</h3>

<p>我採用過的編輯器很多，編輯器也是用的順手就好，好的工具可以讓開發的時間縮短，開發起來更方便，更易於找尋錯誤，但是並沒有哪個比較好的問題，高手用記事本也還是高手。</p>

<p>這邊推薦幾個編輯器:</p>

<ol>
<li><h4><a href="http://aptana.com">Aptana Studio</a></h4>

<p>從eclipse衍申而來的老牌IDE，跨平台，我學生時期一直到剛進公司都是採用Aptana在做開發，優點是跨平台，eclipse plugin眾多，本身支援JavaScript的開發，有多種JavaScript Framework如jQuery，Prototype，extJS的自動提示功能，缺點就是太肥大了，OSX上使用有時候感覺不是很順，還會發呆:(</p></li>
<li><h4><a href="http://macromates.com/">TextMate</a></h4>

<p>熟悉Ruby開發的開發者不可能不知道的一個編輯器，也是老牌子了，不過中文支援有很大的問題。付費軟體</p></li>
<li><h4><a href="http://www.sublimetext.com/2">Sublime text 2</a></h4>

<p>我現在使用的編輯器之一，介面漂亮，跨平台，Plugin也不少，而且免費使用，中文也沒有問題，而且除了PHP，其他語言的支援性也很好，尤其是Python，沒事會寫寫Python的玩家們，我很推薦這一套編輯器。</p></li>
<li><h4><a href="http://www.vim.org/">vim</a></h4>

<p>常操作unix系的OS必學的編輯器，有很多的plugin，當然terminal下只有全鍵盤的操作方式，但是習慣了實在是會上癮，我連sublime text都有加入vim的操作快捷，可見對其操作中毒之深，我常常會有機會直接ssh到測試server上修改一些小東西，vi/vim的操作是必學的。</p></li>
</ol>


<h3>3. 版本控制</h3>

<p>我傾向於一開始學習程式設計，就要跟著學習版本控制系統的使用，目前我個人使用都是用Git來做為我的版本控制系統，Mac本身就內建了Git，很是方便，而公司則是SVN/Git兩種系統來管理的專案皆有，使用版本控制系統能夠有效的來管理專案，尤其是多人開發的時候，有效的來掌控原始碼，甚至在準備deploy專案的時候也派的上用場。</p>

<p>如果要採用Git，可以先看看這篇 <a href="http://rogerdudler.github.com/git-guide/">Git - the simple guide.</a> 簡單的了解到Git是怎麼樣的一個系統，另外，也去申請一個 <a href="http://www.github.com">GitHub</a> 的帳號，除了免費的remote server之外，也可以從這個龐大的PG社群獲得許多的技術寶物。</p>

<blockquote><p>工欲善其事，必先利其器</p></blockquote>

<p>有了好的開發環境與工具，可以讓專案的開發事半功倍，加速開發的時間與效率，但是有了方便的開發工具，也別忘了打好基礎，雄厚的語言基礎與知識才是最強大的後盾與武器。</p>
]]></content>
  </entry>
  
</feed>
